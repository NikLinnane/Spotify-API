{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of Hungry Guys Radio Spotify Analysis",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qy5I2H-wnpLV"
      },
      "source": [
        "# **\"Hungry Guys Radio\" Playlist Analysis**\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "***Who:*** *Hungry Guys Radio is a collaborative Spotify playlist contributed to by Jack, Conor, Ian and myself.*\n",
        "\n",
        "***What:*** *The goal of this analysis is to sharpen my data science skills but more importantly highlight how mine and my pals' music preferences may differ and profile our (fantastic) playlist as a whole.*\n",
        "\n",
        "***Why:*** *Whenever I listen to Hungry Guys Radio I feel I'm able to guess which of us added the currently playing song to the playlist with decent accuracy. This led me to think about our different tastes in music and how I could use my data science skills to actually quantify and visualize these differences.*\n",
        "\n",
        "***How:*** *For this project I will of course need to utilize Spotipy (Spotify's API) to access the data as well as R for EDA and Python for machine learning.*\n",
        "\n",
        "\n",
        "---\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YDuFhvVLnj1H"
      },
      "source": [
        "## **Data Extraction**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "egPwEbRSir3L"
      },
      "source": [
        "Connect To Spotify API (Spotipy) & Autenticate"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Cuj5n86qiu-o"
      },
      "source": [
        "#!pip install spotipy --upgrade -q\n",
        "import spotipy\n",
        "from spotipy.oauth2 import SpotifyClientCredentials\n",
        "import pandas as pd\n",
        "\n",
        "# authorization\n",
        "cid = 'INSERT CLIENT ID'\n",
        "secret = 'INSERT SECRET ID'\n",
        "\n",
        "client_credentials_manager = SpotifyClientCredentials(client_id=cid, client_secret=secret)\n",
        "sp = spotipy.Spotify(client_credentials_manager = client_credentials_manager)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yZsdQ02ijEGH"
      },
      "source": [
        "We'll need a function to do a few things...\n",
        "\n",
        "*   Call the Spotipy API and access a given playlist URL\n",
        "*   Iterate over each song within the playlist and extract wanted song and playlist metrics\n",
        "*   In order to work around Spotipy's limit of pulling a maximum of 100 songs at once, the function will need to accept \"limit\" and \"offset\" paramaters to shift the starting point at each call\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "j8wsarIPjAiz"
      },
      "source": [
        "# function to loop through a playlist and grab information on each song\n",
        "def call_playlist(creator_id, playlist_url, limit, offset):\n",
        "    # NOTE: use playlist_url instead of playlist_id. playlist_id doesn't accept limit and offset parameters for some reason?\n",
        "    \n",
        "    # create an empty list and an empty df\n",
        "    playlist_features_list = ['artist', 'album', 'track_name', 'track_id', 'danceability', 'energy', 'key', 'loudness', 'mode', \n",
        "                              'speechiness', 'instrumentalness', 'liveness', 'valence', 'tempo', 'duration_ms', 'time_signature', 'acousticness']\n",
        "    playlist_df = pd.DataFrame(columns = playlist_features_list)\n",
        "    \n",
        "    # loop through the specified playlist and extract wanted features\n",
        "    playlist = sp.user_playlist_tracks(creator_id, playlist_url, limit=limit, offset=offset)[\"items\"]\n",
        "    for track in playlist:\n",
        "\n",
        "        # create empty dict\n",
        "        playlist_features = {}\n",
        "\n",
        "        # get metadata\n",
        "        playlist_features['artist'] = track['track']['album']['artists'][0]['name']\n",
        "        playlist_features['album'] = track['track']['album']['name']\n",
        "        playlist_features[\"track_name\"] = track[\"track\"][\"name\"]\n",
        "        playlist_features[\"track_id\"] = track[\"track\"][\"id\"]\n",
        "        playlist_features[\"explicit\"] = track[\"track\"][\"explicit\"]\n",
        "        playlist_features[\"popularity\"] = track[\"track\"][\"popularity\"]\n",
        "        playlist_features[\"album_release_date\"] = track[\"track\"][\"album\"][\"release_date\"]\n",
        "        playlist_features[\"duration_ms\"] = track[\"track\"][\"duration_ms\"]\n",
        "        playlist_features['added_by'] = track[\"added_by\"][\"id\"]\n",
        "        playlist_features['added_at'] = track[\"added_at\"]\n",
        "        \n",
        "        # get audio features\n",
        "        audio_features = sp.audio_features(playlist_features[\"track_id\"])[0]\n",
        "        for feature in playlist_features_list[4:]:\n",
        "            playlist_features[feature] = audio_features[feature]\n",
        "        \n",
        "        # concat dfs\n",
        "        track_df = pd.DataFrame(playlist_features, index = [0])\n",
        "        playlist_df = pd.concat([playlist_df, track_df], ignore_index = True)\n",
        "\n",
        "    # return df\n",
        "    return playlist_df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CB5gD27ykSl_"
      },
      "source": [
        "Now we can call the function however many times we need to in order to pull all songs! (Have yet for come up with a loop that could do this automatically, sorry). In the case of Hungry Guys Radio there are currently 270 songs so we'll need to call 3 times, each time adding 100 to the offset."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wftgYjGckQsT"
      },
      "source": [
        "# songs 1-100 requires an offset of 0 since we want to start at the first song\n",
        "first100 = call_playlist('nik-linnane', 'https://open.spotify.com/playlist/4PNAiZyW8o758BtoIRwwFR', 100, 0)\n",
        "\n",
        "# songs 101-200 requires an offset of 100\n",
        "second100 = call_playlist('nik-linnane', 'https://open.spotify.com/playlist/4PNAiZyW8o758BtoIRwwFR', 100, 100)\n",
        "\n",
        "# songs 201-270 requires an offset of 200\n",
        "third100 = call_playlist('nik-linnane', 'https://open.spotify.com/playlist/4PNAiZyW8o758BtoIRwwFR', 100, 200)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Upzg1wwJlrVM"
      },
      "source": [
        "Now that we have all songs within the playlist stored in 3 dataframes we can concat them to create our complete dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "FuDPekGdl7GO",
        "outputId": "87cd1188-1437-4503-823a-a686acc1e122"
      },
      "source": [
        "hungryGuysRadio = pd.concat([first100, second100, third100], ignore_index = True)\n",
        "hungryGuysRadio.describe()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>danceability</th>\n",
              "      <th>energy</th>\n",
              "      <th>loudness</th>\n",
              "      <th>speechiness</th>\n",
              "      <th>liveness</th>\n",
              "      <th>valence</th>\n",
              "      <th>tempo</th>\n",
              "      <th>acousticness</th>\n",
              "      <th>popularity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>283.000000</td>\n",
              "      <td>283.000000</td>\n",
              "      <td>283.000000</td>\n",
              "      <td>283.000000</td>\n",
              "      <td>283.000000</td>\n",
              "      <td>283.000000</td>\n",
              "      <td>283.000000</td>\n",
              "      <td>283.000000</td>\n",
              "      <td>283.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.630357</td>\n",
              "      <td>0.712300</td>\n",
              "      <td>-6.503004</td>\n",
              "      <td>0.071042</td>\n",
              "      <td>0.169195</td>\n",
              "      <td>0.638849</td>\n",
              "      <td>117.999527</td>\n",
              "      <td>0.199993</td>\n",
              "      <td>45.222615</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.126841</td>\n",
              "      <td>0.139701</td>\n",
              "      <td>2.227613</td>\n",
              "      <td>0.073769</td>\n",
              "      <td>0.138684</td>\n",
              "      <td>0.221271</td>\n",
              "      <td>27.549994</td>\n",
              "      <td>0.218542</td>\n",
              "      <td>24.100482</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.221000</td>\n",
              "      <td>0.330000</td>\n",
              "      <td>-17.032000</td>\n",
              "      <td>0.022800</td>\n",
              "      <td>0.022200</td>\n",
              "      <td>0.075800</td>\n",
              "      <td>67.055000</td>\n",
              "      <td>0.000015</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.549500</td>\n",
              "      <td>0.626000</td>\n",
              "      <td>-7.667000</td>\n",
              "      <td>0.034750</td>\n",
              "      <td>0.088950</td>\n",
              "      <td>0.482000</td>\n",
              "      <td>98.045000</td>\n",
              "      <td>0.027450</td>\n",
              "      <td>37.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.635000</td>\n",
              "      <td>0.718000</td>\n",
              "      <td>-6.254000</td>\n",
              "      <td>0.045200</td>\n",
              "      <td>0.113000</td>\n",
              "      <td>0.668000</td>\n",
              "      <td>114.033000</td>\n",
              "      <td>0.109000</td>\n",
              "      <td>53.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.712000</td>\n",
              "      <td>0.816000</td>\n",
              "      <td>-4.858000</td>\n",
              "      <td>0.069750</td>\n",
              "      <td>0.200500</td>\n",
              "      <td>0.834000</td>\n",
              "      <td>128.036000</td>\n",
              "      <td>0.338500</td>\n",
              "      <td>62.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>0.974000</td>\n",
              "      <td>0.982000</td>\n",
              "      <td>-1.866000</td>\n",
              "      <td>0.567000</td>\n",
              "      <td>0.912000</td>\n",
              "      <td>0.978000</td>\n",
              "      <td>210.164000</td>\n",
              "      <td>0.891000</td>\n",
              "      <td>93.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       danceability      energy  ...  acousticness  popularity\n",
              "count    283.000000  283.000000  ...    283.000000  283.000000\n",
              "mean       0.630357    0.712300  ...      0.199993   45.222615\n",
              "std        0.126841    0.139701  ...      0.218542   24.100482\n",
              "min        0.221000    0.330000  ...      0.000015    0.000000\n",
              "25%        0.549500    0.626000  ...      0.027450   37.000000\n",
              "50%        0.635000    0.718000  ...      0.109000   53.000000\n",
              "75%        0.712000    0.816000  ...      0.338500   62.000000\n",
              "max        0.974000    0.982000  ...      0.891000   93.000000\n",
              "\n",
              "[8 rows x 9 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sssrX83Erz15"
      },
      "source": [
        "## **Data Cleaning**\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "S6epp7Oa1gtf"
      },
      "source": [
        "# convert existing columns to datetime\n",
        "hungryGuysRadio['added_at'] = pd.to_datetime(hungryGuysRadio['added_at'], errors='coerce')\n",
        "hungryGuysRadio['album_release_date'] = pd.to_datetime(hungryGuysRadio['album_release_date'], errors='coerce')\n",
        "\n",
        "# create new date_added column by removing time zone and time info\n",
        "hungryGuysRadio['date_added'] = hungryGuysRadio['added_at'].dt.tz_localize(None)\n",
        "hungryGuysRadio['date_added'] = pd.to_datetime(hungryGuysRadio['added_at']).dt.date\n",
        "\n",
        "# create new duration_min column by converting ms to minutes\n",
        "hungryGuysRadio['duration_min'] = hungryGuysRadio['duration_ms']/60000\n",
        "\n",
        "# create new user columns by converting id to names\n",
        "hungryGuysRadio['user'] = hungryGuysRadio['added_by'].apply(lambda x : 'Jack' if x == 'murphycfp' else (\n",
        "                                                                       'Nik' if x == 'nik-linnane' else (\n",
        "                                                                       'Ian' if x == '65jhgcs8ihtvs5pl09xqrgul5' else \n",
        "                                                                       'Conor')))\n",
        "\n",
        "# convert explicit to binary\n",
        "hungryGuysRadio['explicit'] = hungryGuysRadio['explicit'].apply(lambda x : 1 if x == True else 0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 264
        },
        "id": "qVLlBYQu6Q6O",
        "outputId": "8f7eff90-9d64-4bc6-fa86-537fd8e84389"
      },
      "source": [
        "hungryGuysRadio.head(3)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>artist</th>\n",
              "      <th>album</th>\n",
              "      <th>track_name</th>\n",
              "      <th>track_id</th>\n",
              "      <th>danceability</th>\n",
              "      <th>energy</th>\n",
              "      <th>key</th>\n",
              "      <th>loudness</th>\n",
              "      <th>mode</th>\n",
              "      <th>speechiness</th>\n",
              "      <th>instrumentalness</th>\n",
              "      <th>liveness</th>\n",
              "      <th>valence</th>\n",
              "      <th>tempo</th>\n",
              "      <th>duration_ms</th>\n",
              "      <th>time_signature</th>\n",
              "      <th>acousticness</th>\n",
              "      <th>explicit</th>\n",
              "      <th>popularity</th>\n",
              "      <th>album_release_date</th>\n",
              "      <th>added_by</th>\n",
              "      <th>added_at</th>\n",
              "      <th>date_added</th>\n",
              "      <th>duration_min</th>\n",
              "      <th>user</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>BØRNS</td>\n",
              "      <td>Dopamine</td>\n",
              "      <td>Electric Love</td>\n",
              "      <td>2GiJYvgVaD2HtM8GqD9EgQ</td>\n",
              "      <td>0.611</td>\n",
              "      <td>0.797</td>\n",
              "      <td>6</td>\n",
              "      <td>-7.627</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0533</td>\n",
              "      <td>0.00137</td>\n",
              "      <td>0.2600</td>\n",
              "      <td>0.518</td>\n",
              "      <td>120.041</td>\n",
              "      <td>218107</td>\n",
              "      <td>4</td>\n",
              "      <td>0.00543</td>\n",
              "      <td>0</td>\n",
              "      <td>83.0</td>\n",
              "      <td>2015-10-16</td>\n",
              "      <td>murphycfp</td>\n",
              "      <td>2019-09-19 03:46:17+00:00</td>\n",
              "      <td>2019-09-19</td>\n",
              "      <td>3.63512</td>\n",
              "      <td>Jack</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Edward Sharpe &amp; The Magnetic Zeros</td>\n",
              "      <td>Up from Below</td>\n",
              "      <td>Janglin</td>\n",
              "      <td>3TgopD2FOwjZBq0YrhbEN4</td>\n",
              "      <td>0.578</td>\n",
              "      <td>0.688</td>\n",
              "      <td>6</td>\n",
              "      <td>-6.551</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0540</td>\n",
              "      <td>5.98e-05</td>\n",
              "      <td>0.3050</td>\n",
              "      <td>0.360</td>\n",
              "      <td>123.910</td>\n",
              "      <td>229600</td>\n",
              "      <td>4</td>\n",
              "      <td>0.63200</td>\n",
              "      <td>0</td>\n",
              "      <td>37.0</td>\n",
              "      <td>2009-07-14</td>\n",
              "      <td>murphycfp</td>\n",
              "      <td>2019-09-19 03:50:02+00:00</td>\n",
              "      <td>2019-09-19</td>\n",
              "      <td>3.82667</td>\n",
              "      <td>Jack</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Goth Babe</td>\n",
              "      <td>Weekend Friend</td>\n",
              "      <td>Weekend Friend</td>\n",
              "      <td>2d3QlXE6FXFDeodiS66yjM</td>\n",
              "      <td>0.409</td>\n",
              "      <td>0.594</td>\n",
              "      <td>1</td>\n",
              "      <td>-9.725</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0310</td>\n",
              "      <td>0.0391</td>\n",
              "      <td>0.0904</td>\n",
              "      <td>0.212</td>\n",
              "      <td>110.187</td>\n",
              "      <td>209455</td>\n",
              "      <td>4</td>\n",
              "      <td>0.03200</td>\n",
              "      <td>0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>2019-01-19</td>\n",
              "      <td>murphycfp</td>\n",
              "      <td>2019-09-19 04:01:40+00:00</td>\n",
              "      <td>2019-09-19</td>\n",
              "      <td>3.49092</td>\n",
              "      <td>Jack</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                               artist           album  ... duration_min  user\n",
              "0                               BØRNS        Dopamine  ...      3.63512  Jack\n",
              "1  Edward Sharpe & The Magnetic Zeros   Up from Below  ...      3.82667  Jack\n",
              "2                           Goth Babe  Weekend Friend  ...      3.49092  Jack\n",
              "\n",
              "[3 rows x 25 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "VSyLwRHe_d4b",
        "outputId": "16a00cc7-d539-45a5-8900-90af0403d5c9"
      },
      "source": [
        "# export file to local\n",
        "from google.colab import files\n",
        "hungryGuysRadio.to_csv('hungryGuysRadio.csv')\n",
        "files.download('hungryGuysRadio.csv')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "download(\"download_a73ca22e-1987-41ee-aa3a-621ec839b0af\", \"hungryGuysRadio.csv\", 61947)"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YYKFBHzqw7TD"
      },
      "source": [
        "## **Pull Additional Playlists**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nEQ6sB5pxDI_"
      },
      "source": [
        "# Spotify's Today's Top Hits\n",
        "topHits = call_playlist('spotify', 'https://open.spotify.com/playlist/37i9dQZF1DXcBWIGoYBM5M?si=e00cef0ea9b9434f&nd=1', 100, 0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "slO5_1jOyAoS"
      },
      "source": [
        "Now we can clean the data the same way we did earlier..."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BwRp0EvxxxE-"
      },
      "source": [
        "# convert existing columns to datetime\n",
        "topHits['added_at'] = pd.to_datetime(topHits['added_at'], errors='coerce')\n",
        "topHits['album_release_date'] = pd.to_datetime(topHits['album_release_date'], errors='coerce')\n",
        "\n",
        "# create new date_added column by removing time zone and time info\n",
        "topHits['date_added'] = topHits['added_at'].dt.tz_localize(None)\n",
        "topHits['date_added'] = pd.to_datetime(topHits['added_at']).dt.date\n",
        "\n",
        "# create new duration_min column by converting ms to minutes\n",
        "topHits['duration_min'] = topHits['duration_ms']/60000\n",
        "\n",
        "# make Spotify the User\n",
        "topHits['added_by'] = 'Spotify'\n",
        "topHits['user'] = 'Spotify'\n",
        "\n",
        "# convert explicit to binary\n",
        "topHits['explicit'] = topHits['explicit'].apply(lambda x : 1 if x == True else 0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "RUpa5Cp9yXzf",
        "outputId": "1c2d1baa-be98-48e8-b556-3389eac71f64"
      },
      "source": [
        "# export file to local\n",
        "from google.colab import files\n",
        "topHits.to_csv('topHits.csv')\n",
        "files.download('topHits.csv')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "download(\"download_4cb06de9-a357-4349-8b0a-d12704309355\", \"topHits.csv\", 11720)"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3qAo2Hnj-bvL"
      },
      "source": [
        "Pull more playlists for ML..."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vRc7LCCJ-b3a"
      },
      "source": [
        "# Spotify's It's ALT Good playlist\n",
        "itsAltGood = call_playlist('Spotify', 'https://open.spotify.com/playlist/37i9dQZF1DX2SK4ytI2KAZ?si=bee50e8ecc5547a9&nd=1', 100, 0)\n",
        "\n",
        "# convert existing columns to datetime\n",
        "itsAltGood['added_at'] = pd.to_datetime(itsAltGood['added_at'], errors='coerce')\n",
        "itsAltGood['album_release_date'] = pd.to_datetime(itsAltGood['album_release_date'], errors='coerce')\n",
        "\n",
        "# create new date_added column by removing time zone and time info\n",
        "itsAltGood['date_added'] = itsAltGood['added_at'].dt.tz_localize(None)\n",
        "itsAltGood['date_added'] = pd.to_datetime(itsAltGood['added_at']).dt.date\n",
        "\n",
        "# create new duration_min column by converting ms to minutes\n",
        "itsAltGood['duration_min'] = itsAltGood['duration_ms']/60000\n",
        "\n",
        "# make Spotify the User\n",
        "itsAltGood['added_by'] = 'Spotify'\n",
        "itsAltGood['user'] = 'Spotify'\n",
        "itsAltGood['PLAYLIST'] = \"It's ALT Good!\"\n",
        "\n",
        "# convert explicit to binary\n",
        "itsAltGood['explicit'] = itsAltGood['explicit'].apply(lambda x : 1 if x == True else 0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gpEwUvUC-b5Z"
      },
      "source": [
        "# Spotify's All New Jazz playlist\n",
        "allNewJazz = call_playlist('Spotify', 'https://open.spotify.com/playlist/37i9dQZF1DWW2c0C8Vb2IR?si=afe2bab37df64629', 100, 0)\n",
        "\n",
        "# convert existing columns to datetime\n",
        "allNewJazz['added_at'] = pd.to_datetime(allNewJazz['added_at'], errors='coerce')\n",
        "allNewJazz['album_release_date'] = pd.to_datetime(allNewJazz['album_release_date'], errors='coerce')\n",
        "\n",
        "# create new date_added column by removing time zone and time info\n",
        "allNewJazz['date_added'] = allNewJazz['added_at'].dt.tz_localize(None)\n",
        "allNewJazz['date_added'] = pd.to_datetime(allNewJazz['added_at']).dt.date\n",
        "\n",
        "# create new duration_min column by converting ms to minutes\n",
        "allNewJazz['duration_min'] = allNewJazz['duration_ms']/60000\n",
        "\n",
        "# make Spotify the User\n",
        "allNewJazz['added_by'] = 'Spotify'\n",
        "allNewJazz['user'] = 'Spotify'\n",
        "allNewJazz['PLAYLIST'] = \"All New Jazz\"\n",
        "\n",
        "# convert explicit to binary\n",
        "allNewJazz['explicit'] = allNewJazz['explicit'].apply(lambda x : 1 if x == True else 0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MPYI6jrR-b7Z"
      },
      "source": [
        "morganFreeman = call_playlist('murphycfp', 'https://open.spotify.com/playlist/2BOfQ6vSaZn288Cyjo3uZa?si=a239c6f3ae814b03&nd=1', 100, 0)\n",
        "\n",
        "# convert existing columns to datetime\n",
        "morganFreeman['added_at'] = pd.to_datetime(morganFreeman['added_at'], errors='coerce')\n",
        "morganFreeman['album_release_date'] = pd.to_datetime(morganFreeman['album_release_date'], errors='coerce')\n",
        "\n",
        "# create new date_added column by removing time zone and time info\n",
        "morganFreeman['date_added'] = morganFreeman['added_at'].dt.tz_localize(None)\n",
        "morganFreeman['date_added'] = pd.to_datetime(morganFreeman['added_at']).dt.date\n",
        "\n",
        "# create new duration_min column by converting ms to minutes\n",
        "morganFreeman['duration_min'] = morganFreeman['duration_ms']/60000\n",
        "\n",
        "# make Spotify the User\n",
        "morganFreeman['added_by'] = 'murphycfp'\n",
        "morganFreeman['user'] = 'Jack'\n",
        "morganFreeman['PLAYLIST'] = \"Morgan Freeman\"\n",
        "\n",
        "# convert explicit to binary\n",
        "morganFreeman['explicit'] = morganFreeman['explicit'].apply(lambda x : 1 if x == True else 0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Mmlvta2aCAkW"
      },
      "source": [
        "# Spotify's Hot Country playlist\n",
        "hotCountry = call_playlist('Spotify', 'https://open.spotify.com/playlist/37i9dQZF1DX1lVhptIYRda?si=202199d6ef494637&nd=1', 100, 0)\n",
        "\n",
        "# convert existing columns to datetime\n",
        "hotCountry['added_at'] = pd.to_datetime(hotCountry['added_at'], errors='coerce')\n",
        "hotCountry['album_release_date'] = pd.to_datetime(hotCountry['album_release_date'], errors='coerce')\n",
        "\n",
        "# create new date_added column by removing time zone and time info\n",
        "hotCountry['date_added'] = hotCountry['added_at'].dt.tz_localize(None)\n",
        "hotCountry['date_added'] = pd.to_datetime(hotCountry['added_at']).dt.date\n",
        "\n",
        "# create new duration_min column by converting ms to minutes\n",
        "hotCountry['duration_min'] = hotCountry['duration_ms']/60000\n",
        "\n",
        "# make Spotify the User\n",
        "hotCountry['added_by'] = 'Spotify'\n",
        "hotCountry['user'] = 'Spotify'\n",
        "hotCountry['PLAYLIST'] = \"Hot Country\"\n",
        "\n",
        "# convert explicit to binary\n",
        "hotCountry['explicit'] = hotCountry['explicit'].apply(lambda x : 1 if x == True else 0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xocfbQRWnkm1"
      },
      "source": [
        "# export file\n",
        "from google.colab import files\n",
        "hotCountry.to_csv('hotCountry.csv')\n",
        "files.download('hotCountry.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Qwq3O0Pl5jbc"
      },
      "source": [
        "cantNotSing = call_playlist('nik-linnane', 'https://open.spotify.com/playlist/1zAeTuJcED6BBCQnqXwobB?si=06db335c69234672', 100, 0)\n",
        "\n",
        "# convert existing columns to datetime\n",
        "cantNotSing['added_at'] = pd.to_datetime(cantNotSing['added_at'], errors='coerce')\n",
        "cantNotSing['album_release_date'] = pd.to_datetime(cantNotSing['album_release_date'], errors='coerce')\n",
        "\n",
        "# create new date_added column by removing time zone and time info\n",
        "cantNotSing['date_added'] = cantNotSing['added_at'].dt.tz_localize(None)\n",
        "cantNotSing['date_added'] = pd.to_datetime(cantNotSing['added_at']).dt.date\n",
        "\n",
        "# create new duration_min column by converting ms to minutes\n",
        "cantNotSing['duration_min'] = cantNotSing['duration_ms']/60000\n",
        "\n",
        "# make Spotify the User\n",
        "cantNotSing['added_by'] = 'nik-linnane'\n",
        "cantNotSing['user'] = 'Nik'\n",
        "cantNotSing['PLAYLIST'] = \"Can't Not Sing Along\"\n",
        "\n",
        "# convert explicit to binary\n",
        "cantNotSing['explicit'] = cantNotSing['explicit'].apply(lambda x : 1 if x == True else 0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "s-am2H865jdh",
        "outputId": "8037b81d-0433-450d-cc38-385c113defd9"
      },
      "source": [
        "# export file\n",
        "from google.colab import files\n",
        "cantNotSing.to_csv('cantNotSing.csv')\n",
        "files.download('cantNotSing.csv')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "download(\"download_1963e8a6-e5e8-40b2-a1eb-25dc6c1e07eb\", \"cantNotSing.csv\", 26301)"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "716fkU8O5873"
      },
      "source": [
        "testingData = call_playlist('nik-linnane', 'https://open.spotify.com/playlist/63dFknrgW7U477XsboNCNM?si=9738b8044bf44b3e', 100, 0)\n",
        "\n",
        "# convert existing columns to datetime\n",
        "testingData['added_at'] = pd.to_datetime(testingData['added_at'], errors='coerce')\n",
        "testingData['album_release_date'] = pd.to_datetime(testingData['album_release_date'], errors='coerce')\n",
        "\n",
        "# create new date_added column by removing time zone and time info\n",
        "testingData['date_added'] = testingData['added_at'].dt.tz_localize(None)\n",
        "testingData['date_added'] = pd.to_datetime(testingData['added_at']).dt.date\n",
        "\n",
        "# create new duration_min column by converting ms to minutes\n",
        "testingData['duration_min'] = testingData['duration_ms']/60000\n",
        "\n",
        "# make Spotify the User\n",
        "testingData['added_by'] = 'nik-linnane'\n",
        "testingData['user'] = 'Nik'\n",
        "testingData['PLAYLIST'] = \"ML Test\"\n",
        "\n",
        "# convert explicit to binary\n",
        "testingData['explicit'] = testingData['explicit'].apply(lambda x : 1 if x == True else 0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "uqUGcFyu589q",
        "outputId": "484b4ac5-8c2e-4c08-aab6-342ee10627b3"
      },
      "source": [
        "# export file\n",
        "from google.colab import files\n",
        "testingData.to_csv('testingData.csv')\n",
        "files.download('testingData.csv')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "download(\"download_c1e5365a-3d54-451b-a4b0-f726e36e2302\", \"testingData.csv\", 2106)"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}